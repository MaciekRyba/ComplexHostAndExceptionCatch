//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NewConsoleComplex.ComplexCalculatorService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComplexType", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
    [System.SerializableAttribute()]
    public partial class ComplexType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ImaginryValueOperationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RealValueOperationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ImaginryValueOperation {
            get {
                return this.ImaginryValueOperationField;
            }
            set {
                if ((this.ImaginryValueOperationField.Equals(value) != true)) {
                    this.ImaginryValueOperationField = value;
                    this.RaisePropertyChanged("ImaginryValueOperation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RealValueOperation {
            get {
                return this.RealValueOperationField;
            }
            set {
                if ((this.RealValueOperationField.Equals(value) != true)) {
                    this.RealValueOperationField = value;
                    this.RaisePropertyChanged("RealValueOperation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomExceptionDetails", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
    [System.SerializableAttribute()]
    public partial class CustomExceptionDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DivideByZeroFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
    [System.SerializableAttribute()]
    public partial class DivideByZeroFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="ComplexCalculatorService.ComplexServices")]
    public interface ComplexServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/AddTwoValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/AddTwoValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NewConsoleComplex.ComplexCalculatorService.CustomExceptionDetails), Action="http://Microsoft.ServiceModel.Samples/ComplexServices/AddTwoValueCustomExceptionD" +
            "etailsFault", Name="CustomExceptionDetails", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
        [System.ServiceModel.FaultContractAttribute(typeof(NewConsoleComplex.ComplexCalculatorService.DivideByZeroFault), Action="http://Microsoft.ServiceModel.Samples/ComplexServices/AddTwoValueDivideByZeroFaul" +
            "tFault", Name="DivideByZeroFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
        NewConsoleComplex.ComplexCalculatorService.ComplexType AddTwoValue(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/AddTwoValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/AddTwoValueResponse")]
        System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> AddTwoValueAsync(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/AddFourValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/AddFourValueResponse")]
        NewConsoleComplex.ComplexCalculatorService.ComplexType AddFourValue(double real1, double real2, double imaginary1, double imaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/AddFourValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/AddFourValueResponse")]
        System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> AddFourValueAsync(double real1, double real2, double imaginary1, double imaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/SubtractTwoValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/SubtractTwoValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NewConsoleComplex.ComplexCalculatorService.CustomExceptionDetails), Action="http://Microsoft.ServiceModel.Samples/ComplexServices/SubtractTwoValueCustomExcep" +
            "tionDetailsFault", Name="CustomExceptionDetails", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
        [System.ServiceModel.FaultContractAttribute(typeof(NewConsoleComplex.ComplexCalculatorService.DivideByZeroFault), Action="http://Microsoft.ServiceModel.Samples/ComplexServices/SubtractTwoValueDivideByZer" +
            "oFaultFault", Name="DivideByZeroFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
        NewConsoleComplex.ComplexCalculatorService.ComplexType SubtractTwoValue(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/SubtractTwoValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/SubtractTwoValueResponse")]
        System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> SubtractTwoValueAsync(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/SubtractFourValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/SubtractFourValueResponse")]
        NewConsoleComplex.ComplexCalculatorService.ComplexType SubtractFourValue(double real1, double real2, double imaginary1, double imaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/SubtractFourValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/SubtractFourValueResponse")]
        System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> SubtractFourValueAsync(double real1, double real2, double imaginary1, double imaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/DivisionTwoValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/DivisionTwoValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NewConsoleComplex.ComplexCalculatorService.CustomExceptionDetails), Action="http://Microsoft.ServiceModel.Samples/ComplexServices/DivisionTwoValueCustomExcep" +
            "tionDetailsFault", Name="CustomExceptionDetails", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
        [System.ServiceModel.FaultContractAttribute(typeof(NewConsoleComplex.ComplexCalculatorService.DivideByZeroFault), Action="http://Microsoft.ServiceModel.Samples/ComplexServices/DivisionTwoValueDivideByZer" +
            "oFaultFault", Name="DivideByZeroFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
        NewConsoleComplex.ComplexCalculatorService.ComplexType DivisionTwoValue(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/DivisionTwoValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/DivisionTwoValueResponse")]
        System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> DivisionTwoValueAsync(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/DivisionFourValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/DivisionFourValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NewConsoleComplex.ComplexCalculatorService.CustomExceptionDetails), Action="http://Microsoft.ServiceModel.Samples/ComplexServices/DivisionFourValueCustomExce" +
            "ptionDetailsFault", Name="CustomExceptionDetails", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
        [System.ServiceModel.FaultContractAttribute(typeof(NewConsoleComplex.ComplexCalculatorService.DivideByZeroFault), Action="http://Microsoft.ServiceModel.Samples/ComplexServices/DivisionFourValueDivideByZe" +
            "roFaultFault", Name="DivideByZeroFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
        NewConsoleComplex.ComplexCalculatorService.ComplexType DivisionFourValue(double real1, double real2, double imaginary1, double imaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/DivisionFourValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/DivisionFourValueResponse")]
        System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> DivisionFourValueAsync(double real1, double real2, double imaginary1, double imaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/MultiplyTwoValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/MultiplyTwoValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NewConsoleComplex.ComplexCalculatorService.CustomExceptionDetails), Action="http://Microsoft.ServiceModel.Samples/ComplexServices/MultiplyTwoValueCustomExcep" +
            "tionDetailsFault", Name="CustomExceptionDetails", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
        [System.ServiceModel.FaultContractAttribute(typeof(NewConsoleComplex.ComplexCalculatorService.DivideByZeroFault), Action="http://Microsoft.ServiceModel.Samples/ComplexServices/MultiplyTwoValueDivideByZer" +
            "oFaultFault", Name="DivideByZeroFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
        NewConsoleComplex.ComplexCalculatorService.ComplexType MultiplyTwoValue(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/MultiplyTwoValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/MultiplyTwoValueResponse")]
        System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> MultiplyTwoValueAsync(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/MultiplyFourValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/MultiplyFourValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NewConsoleComplex.ComplexCalculatorService.CustomExceptionDetails), Action="http://Microsoft.ServiceModel.Samples/ComplexServices/MultiplyFourValueCustomExce" +
            "ptionDetailsFault", Name="CustomExceptionDetails", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
        [System.ServiceModel.FaultContractAttribute(typeof(NewConsoleComplex.ComplexCalculatorService.DivideByZeroFault), Action="http://Microsoft.ServiceModel.Samples/ComplexServices/MultiplyFourValueDivideByZe" +
            "roFaultFault", Name="DivideByZeroFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.Samples")]
        NewConsoleComplex.ComplexCalculatorService.ComplexType MultiplyFourValue(double real1, double real2, double imaginary1, double imaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ComplexServices/MultiplyFourValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ComplexServices/MultiplyFourValueResponse")]
        System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> MultiplyFourValueAsync(double real1, double real2, double imaginary1, double imaginary2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ComplexServicesChannel : NewConsoleComplex.ComplexCalculatorService.ComplexServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ComplexServicesClient : System.ServiceModel.ClientBase<NewConsoleComplex.ComplexCalculatorService.ComplexServices>, NewConsoleComplex.ComplexCalculatorService.ComplexServices {
        
        public ComplexServicesClient() {
        }
        
        public ComplexServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ComplexServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ComplexServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ComplexServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NewConsoleComplex.ComplexCalculatorService.ComplexType AddTwoValue(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex) {
            return base.Channel.AddTwoValue(FirstComplex, SecondComplex);
        }
        
        public System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> AddTwoValueAsync(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex) {
            return base.Channel.AddTwoValueAsync(FirstComplex, SecondComplex);
        }
        
        public NewConsoleComplex.ComplexCalculatorService.ComplexType AddFourValue(double real1, double real2, double imaginary1, double imaginary2) {
            return base.Channel.AddFourValue(real1, real2, imaginary1, imaginary2);
        }
        
        public System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> AddFourValueAsync(double real1, double real2, double imaginary1, double imaginary2) {
            return base.Channel.AddFourValueAsync(real1, real2, imaginary1, imaginary2);
        }
        
        public NewConsoleComplex.ComplexCalculatorService.ComplexType SubtractTwoValue(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex) {
            return base.Channel.SubtractTwoValue(FirstComplex, SecondComplex);
        }
        
        public System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> SubtractTwoValueAsync(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex) {
            return base.Channel.SubtractTwoValueAsync(FirstComplex, SecondComplex);
        }
        
        public NewConsoleComplex.ComplexCalculatorService.ComplexType SubtractFourValue(double real1, double real2, double imaginary1, double imaginary2) {
            return base.Channel.SubtractFourValue(real1, real2, imaginary1, imaginary2);
        }
        
        public System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> SubtractFourValueAsync(double real1, double real2, double imaginary1, double imaginary2) {
            return base.Channel.SubtractFourValueAsync(real1, real2, imaginary1, imaginary2);
        }
        
        public NewConsoleComplex.ComplexCalculatorService.ComplexType DivisionTwoValue(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex) {
            return base.Channel.DivisionTwoValue(FirstComplex, SecondComplex);
        }
        
        public System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> DivisionTwoValueAsync(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex) {
            return base.Channel.DivisionTwoValueAsync(FirstComplex, SecondComplex);
        }
        
        public NewConsoleComplex.ComplexCalculatorService.ComplexType DivisionFourValue(double real1, double real2, double imaginary1, double imaginary2) {
            return base.Channel.DivisionFourValue(real1, real2, imaginary1, imaginary2);
        }
        
        public System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> DivisionFourValueAsync(double real1, double real2, double imaginary1, double imaginary2) {
            return base.Channel.DivisionFourValueAsync(real1, real2, imaginary1, imaginary2);
        }
        
        public NewConsoleComplex.ComplexCalculatorService.ComplexType MultiplyTwoValue(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex) {
            return base.Channel.MultiplyTwoValue(FirstComplex, SecondComplex);
        }
        
        public System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> MultiplyTwoValueAsync(NewConsoleComplex.ComplexCalculatorService.ComplexType FirstComplex, NewConsoleComplex.ComplexCalculatorService.ComplexType SecondComplex) {
            return base.Channel.MultiplyTwoValueAsync(FirstComplex, SecondComplex);
        }
        
        public NewConsoleComplex.ComplexCalculatorService.ComplexType MultiplyFourValue(double real1, double real2, double imaginary1, double imaginary2) {
            return base.Channel.MultiplyFourValue(real1, real2, imaginary1, imaginary2);
        }
        
        public System.Threading.Tasks.Task<NewConsoleComplex.ComplexCalculatorService.ComplexType> MultiplyFourValueAsync(double real1, double real2, double imaginary1, double imaginary2) {
            return base.Channel.MultiplyFourValueAsync(real1, real2, imaginary1, imaginary2);
        }
    }
}
